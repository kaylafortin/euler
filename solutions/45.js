import { template } from '../helpers/template.js';
import { getHexagonalValue, getPentagonalValue, getTriangleValue } from '../helpers/shapes.js';

/**
 * Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

 Triangle        Tn=n(n+1)/2        1, 3, 6, 10, 15, ...
 Pentagonal        Pn=n(3n−1)/2        1, 5, 12, 22, 35, ...
 Hexagonal        Hn=n(2n−1)        1, 6, 15, 28, 45, ...
 It can be verified that T285 = P165 = H143 = 40755.

 Find the next triangle number that is also pentagonal and hexagonal.
 */

const TEST_ANSWER = 40755

const TEST_ARGS = {
    // one is a common number
    limit: 2,
}

const ARGS = {
    limit: 3
}

const solution = ({ limit }) => {
    const pentagonArr = []
    const pentagonObj = {}
    const hexagonalArr = []
    const hexagonalObj = {}

    const answer = [];

    const getIsValidShapeValue = (val, arr, obj, getVal) => {
        const max = arr.length ? arr[arr.length - 1] : 0;
        if (max > val) {
            return !!obj[val]
        }
        const nextN = arr.length + 1
        const nextVal = getVal(nextN);
        obj[nextVal] = nextN
        arr.push(nextVal)
        return getIsValidShapeValue(val, arr, obj, getVal)
    }

    const isAnswer = (n) => {
        const triangle = getTriangleValue(n);
        if (getIsValidShapeValue(triangle, hexagonalArr, hexagonalObj, getHexagonalValue)) {
            if (getIsValidShapeValue(triangle, pentagonArr, pentagonObj, getPentagonalValue)) {
                answer.push(triangle)
            }
        }
    }

    let count = 1
    while (answer.length < limit) {
        isAnswer(count)
        count++
    }

    return answer[limit - 1]
}

template(ARGS, TEST_ARGS, TEST_ANSWER, solution)